{"version":3,"file":"phone-formatter.min.js","sources":["phone-formatter.js"],"sourcesContent":["/**\n * @version 1.2.1\n */\n\nvar Freedom = Freedom || {};\n\n/**\n * @constructor\n * @link https://github.com/1234ru/phone-formatter\n * @param {string[]} patterns\n */\nFreedom.PhoneFormatter = function ( patterns ) {\n    this.patterns = this.validatePatterns( patterns );\n    this.defaultEmptyFieldStart = this.pickEmptyFieldStart();\n}\n\n/**\n * @param {HTMLInputElement} input\n */\nFreedom.PhoneFormatter.prototype.attachToInput = function ( input ) {\n    this.input = input;\n    this.handlers = this.createHandlersInstance( this );\n    for ( var eventType in this.handlers ) {\n        this.input.addEventListener( eventType, this.handlers[ eventType ] );\n    }\n    this.refreshInputValue( this.input );\n}\n\nFreedom.PhoneFormatter.prototype.createHandlersInstance = function( object ) {\n    return {\n        input: function () {\n            object.refreshInputValue( this );\n        },\n        focusin: function () {\n            if ( ! this.value.trim() ) {\n                this.value = object.defaultEmptyFieldStart;\n            }\n        },\n        focusout: function () {\n            if ( this.value.trim() === object.defaultEmptyFieldStart ) {\n                this.value = '';\n            }\n        }\n    };\n}\n\nFreedom.PhoneFormatter.prototype.detachFromInput = function () {\n    for ( var eventType in this.handlers ) {\n        this.input.removeEventListener( eventType, this.handlers[ eventType ] );\n        delete this.handlers[ eventType ];\n    }\n    delete this.input;\n}\n\n/** @private */\nFreedom.PhoneFormatter.prototype.validatePatterns = function( allPatterns )   {\n    var validPatterns = [];\n    var pattern;\n    for ( var i = 0; i < allPatterns.length; i++) {\n        pattern = allPatterns[ i ];\n        if ( ! this.isPatternStringValid( pattern )   ) {\n            this.throwInvalidPatternError( pattern );\n        } else {\n            validPatterns.push( pattern )  \n        }\n    }\n    return validPatterns;\n}\n\n/**\n * Picks fragment preceding first number placholder.\n * @private\n * @return string\n */\nFreedom.PhoneFormatter.prototype.pickEmptyFieldStart = function() {\n    var defaultPattern = this.patterns[ 0 ];\n    if ( defaultPattern )   {\n        var matches = /^[^N]+/g.exec( defaultPattern );\n        return matches[ 0 ] || '';\n    } else {\n        return '';\n    }\n}\n\n/**\n * @param {HTMLInputElement} input\n */\nFreedom.PhoneFormatter.prototype.refreshInputValue = function( input ) {\n    var currentValue = input.value;\n    var newValue;\n    try {\n        newValue = this.format( currentValue, true );\n    } catch ( e ) {\n        // If no pattern matched, removing invalid characters anyway.\n        newValue = this.removeInvalidCharacters( currentValue );\n    }\n    this.setValueAndHandleCursor( input, newValue );\n}\n\n/**\n * @param {string} rawPhone\n * @param {boolean} throwExceptionWhenNoMatch=false\n * @param {boolean} lengthStrictCheck=false\n * @return {string}\n */\nFreedom.PhoneFormatter.prototype.format = function (\n    rawPhone,\n    throwExceptionWhenNoMatch,\n    lengthStrictCheck\n) {\n    var formattedPhone;\n    for ( var i = 0; i < this.patterns.length; i++ ) {\n        try {\n            formattedPhone = this.applyPattern(\n                rawPhone,\n                this.patterns[ i ],\n                true,\n                lengthStrictCheck\n            );\n        } catch ( e ) { // no match\n            formattedPhone = '';\n        }\n        if ( formattedPhone ) { // match!\n            break;\n        }\n    }\n    if ( formattedPhone ) {\n        return formattedPhone;\n    } else {\n        if ( throwExceptionWhenNoMatch ) {\n            throw 'Phone \"' + rawPhone + '\" didn\\'t match any of the patterns:'\n                + \"\\n\" + this.patterns.join(\",\\n\");\n        } else {\n            return rawPhone;\n        }\n    }\n}\n\n/**\n * Setting input's value and keeping cursor where it was\n * if it's not at the end.\n * @param {HTMLInputElement} input\n * @param {string} newValue\n */\nFreedom.PhoneFormatter.prototype.setValueAndHandleCursor = function ( input, newValue ) {\n    // https://www.vishalon.net/blog/javascript-getting-and-setting-caret-position-in-textarea\n    var caretPosition = input.selectionEnd;\n    var keep = ( caretPosition < input.value.length );\n    input.value = newValue;\n    if ( keep ) {\n        input.setSelectionRange( caretPosition, caretPosition );\n    }\n}\n\n/**\n * @private\n * @param {string} value\n * @return {string}\n */\nFreedom.PhoneFormatter.prototype.removeInvalidCharacters = function( value )   {\n    return value.replace( /[^+\\d\\s()\\-]/g, '' );\n}\n\n/**\n * @private\n * @param {string} rawPhone\n * @param {string} pattern\n * @param {boolean} [throwExceptionWhenNoMatch=false]\n * @param {boolean} [lengthStrictCheck=false]\n */\nFreedom.PhoneFormatter.prototype.applyPattern = function(\n    rawPhone,\n    pattern,\n    throwExceptionWhenNoMatch,\n    lengthStrictCheck\n) {\n    // Parsing a template character by character.\n    var posAtPattern = 0;\n    var posAtPhone = 0;\n    var patternChar;\n    var phoneChar;\n    var formattedPhone = '';\n\n    while (\n        ( patternChar = pattern.substr( posAtPattern, 1 ) )\n        &&\n        ( phoneChar = rawPhone.substr( posAtPhone, 1 ) )\n    ) {\n        // console.log( \"=======\");\n        // console.log( \"Pattern char:\", patternChar );\n        // console.log( \"Phone char: \", phoneChar );\n        if ( patternChar === phoneChar ) {\n            posAtPhone++;\n            if ( phoneChar !== 'N' ) {\n                // \"N\" may come from user input and should not be allowed\n                formattedPhone += phoneChar;\n                posAtPattern++;\n            }\n        } else if ( isNaN( parseInt( phoneChar ) ) ) {\n            // Disallow non-numeric characters which don't match the pattern\n            // Is character a digit: https://stackoverflow.com/a/58102052/589600\n            posAtPhone++;\n        } else if ( patternChar === 'N' ) {\n            formattedPhone += phoneChar;\n            posAtPattern++;\n            posAtPhone++;\n        } else if ( isNaN( parseInt( patternChar ) ) ) {\n            formattedPhone += patternChar;\n            posAtPattern++;\n        } else {\n            // Ran into non-matching digits at the start -\n            // pattern doesn't match, terminating execution.\n            // console.log( \"Discarding formatted phone\");\n            formattedPhone = '';\n            break;\n        }\n        // console.log( \"Formatted phone: \", formattedPhone );\n    }\n\n    if ( formattedPhone && lengthStrictCheck ) {\n        if ( posAtPattern != pattern.length ) {\n            formattedPhone = '';\n        }\n    }\n\n    if ( formattedPhone ) {\n        return formattedPhone;\n    } else {\n        if ( throwExceptionWhenNoMatch ) {\n            throw 'Phone \"' + rawPhone + '\" didn\\'t match pattern \"' + pattern + '\".';\n        } else {\n            return rawPhone;\n        }\n    }\n}\n\n/** @private */\nFreedom.PhoneFormatter.prototype.isPatternStringValid = function( patternString )   {\n    var invalidCharsRegexp = /[^\\d\\s()+\\-N ]/g;\n    return ! invalidCharsRegexp.test( patternString );\n}\n\n/** @private */\nFreedom.PhoneFormatter.prototype.throwInvalidPatternError = function( patternString ) {\n    var msg = 'Invalid phone pattern \"%s\". '\n        + 'Only digits, spaces, \"+\", \"-\", \"(\", \")\" and \"N\" are allowed' ;\n    console.error( msg, patternString );\n}\n\n/**\n * @param {string} selector\n */\nFreedom.PhoneFormatter.prototype.attachToSelector = function( selector ) {\n    if ( ! Freedom.SelectorWatcher ) {\n        const msg = \"You need Freedom.SelectorWatcher library.\\n\"\n            + \"Get it at https://github.com/1234ru/selector-watcher/blob/master/lib.js\"\n        console.error( msg );\n    } else {\n        try {\n            var obj = this;\n            this.watcher = new Freedom.SelectorWatcher();\n            this.watcher.attach( {\n                selector: selector,\n                callback: function ( input ) {\n                    obj.refreshInputValue( input );\n                },\n                handlersByType: this.createHandlersInstance( this )\n            } );\n        }\n        catch ( e ) {\n            console.error( e );\n        }\n    }\n\n}\n\nFreedom.PhoneFormatter.prototype.detachFromSelector = function() {\n    if ( this.watcher ) {\n        this.watcher.detach();\n        delete this.watcher;\n    }\n}"],"names":["Freedom","PhoneFormatter","patterns","this","validatePatterns","defaultEmptyFieldStart","pickEmptyFieldStart","prototype","attachToInput","input","eventType","handlers","createHandlersInstance","addEventListener","refreshInputValue","object","focusin","value","trim","focusout","detachFromInput","removeEventListener","allPatterns","pattern","validPatterns","i","length","isPatternStringValid","push","throwInvalidPatternError","defaultPattern","exec","newValue","currentValue","format","e","removeInvalidCharacters","setValueAndHandleCursor","rawPhone","throwExceptionWhenNoMatch","lengthStrictCheck","formattedPhone","applyPattern","join","caretPosition","selectionEnd","keep","setSelectionRange","replace","patternChar","phoneChar","posAtPattern","posAtPhone","substr","isNaN","parseInt","patternString","test","console","error","attachToSelector","selector","SelectorWatcher","obj","watcher","attach","callback","handlersByType","detachFromSelector","detach"],"mappings":"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"}