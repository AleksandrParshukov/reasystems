var Freedom=Freedom||{};Freedom.PhoneFormatter=function(t){this.patterns=this.validatePatterns(t),this.defaultEmptyFieldStart=this.pickEmptyFieldStart()},Freedom.PhoneFormatter.prototype.attachToInput=function(t){for(var e in this.input=t,this.handlers=this.createHandlersInstance(this),this.handlers)this.input.addEventListener(e,this.handlers[e]);this.refreshInputValue(this.input)},Freedom.PhoneFormatter.prototype.createHandlersInstance=function(t){return{input:function(){t.refreshInputValue(this)},focusin:function(){this.value.trim()||(this.value=t.defaultEmptyFieldStart)},focusout:function(){this.value.trim()===t.defaultEmptyFieldStart&&(this.value="")}}},Freedom.PhoneFormatter.prototype.detachFromInput=function(){for(var t in this.handlers)this.input.removeEventListener(t,this.handlers[t]),delete this.handlers[t];delete this.input},Freedom.PhoneFormatter.prototype.validatePatterns=function(t){for(var e,r=[],n=0;n<t.length;n++)e=t[n],this.isPatternStringValid(e)?r.push(e):this.throwInvalidPatternError(e);return r},Freedom.PhoneFormatter.prototype.pickEmptyFieldStart=function(){var t=this.patterns[0];return t&&/^[^N]+/g.exec(t)[0]||""},Freedom.PhoneFormatter.prototype.refreshInputValue=function(t){var e,r=t.value;try{e=this.format(r,!0)}catch(t){e=this.removeInvalidCharacters(r)}this.setValueAndHandleCursor(t,e)},Freedom.PhoneFormatter.prototype.format=function(t,e,r){for(var n,o=0;o<this.patterns.length;o++){try{n=this.applyPattern(t,this.patterns[o],!0,r)}catch(t){n=""}if(n)break}if(n)return n;if(e)throw'Phone "'+t+"\" didn't match any of the patterns:\n"+this.patterns.join(",\n");return t},Freedom.PhoneFormatter.prototype.setValueAndHandleCursor=function(t,e){var r=t.selectionEnd,n=r<t.value.length;t.value=e,n&&t.setSelectionRange(r,r)},Freedom.PhoneFormatter.prototype.removeInvalidCharacters=function(t){return t.replace(/[^+\d\s()\-]/g,"")},Freedom.PhoneFormatter.prototype.applyPattern=function(t,e,r,n){for(var o,a,i=0,s=0,h="";(o=e.substr(i,1))&&(a=t.substr(s,1));)if(o===a)s++,"N"!==a&&(h+=a,i++);else if(isNaN(parseInt(a)))s++;else if("N"===o)h+=a,i++,s++;else{if(!isNaN(parseInt(o))){h="";break}h+=o,i++}if(h=h&&n&&i!=e.length?"":h)return h;if(r)throw'Phone "'+t+'" didn\'t match pattern "'+e+'".';return t},Freedom.PhoneFormatter.prototype.isPatternStringValid=function(t){return!/[^\d\s()+\-N ]/g.test(t)},Freedom.PhoneFormatter.prototype.throwInvalidPatternError=function(t){console.error('Invalid phone pattern "%s". Only digits, spaces, "+", "-", "(", ")" and "N" are allowed',t)},Freedom.PhoneFormatter.prototype.attachToSelector=function(t){if(Freedom.SelectorWatcher)try{var e=this;this.watcher=new Freedom.SelectorWatcher,this.watcher.attach({selector:t,callback:function(t){e.refreshInputValue(t)},handlersByType:this.createHandlersInstance(this)})}catch(t){console.error(t)}else console.error("You need Freedom.SelectorWatcher library.\nGet it at https://github.com/1234ru/selector-watcher/blob/master/lib.js")},Freedom.PhoneFormatter.prototype.detachFromSelector=function(){this.watcher&&(this.watcher.detach(),delete this.watcher)};
//# sourceMappingURL=phone-formatter.min.js.map
